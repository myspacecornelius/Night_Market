services:
  redis:
    image: redis:7-alpine
    ports:
      - "6380:6379"
    volumes:
      - redis_services_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - servicesnet

  mysql:
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-root}
      MYSQL_DATABASE: ${MYSQL_DATABASE:-sneakersniper}
      MYSQL_USER: ${MYSQL_USER:-sneakers}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-sneakers}
    ports:
      - "3307:3306"
    volumes:
      - mysql_services_data:/var/lib/mysql
    healthcheck:
      test: ["CMD-SHELL", "mysqladmin ping -h 127.0.0.1 -uroot -p$${MYSQL_ROOT_PASSWORD}"]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - servicesnet

  # Optional Postgres for services/api models (kept for future use)
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secretpassword}
      POSTGRES_DB: ${POSTGRES_DB:-snpd}
    ports:
      - "5434:5432"
    volumes:
      - pg_services_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - servicesnet

  api-gateway:
    build:
      context: ./services/api
      dockerfile: Dockerfile
    environment:
      REDIS_URL: ${REDIS_URL:-redis://redis:6379/0}
      DATABASE_URL: ${SERVICES_DATABASE_URL:-postgresql://postgres:secretpassword@postgres:5432/snpd}
      ENVIRONMENT: ${ENVIRONMENT:-development}
    ports:
      - "8001:8000"
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - servicesnet

  monitor:
    build:
      context: ./services/monitor
      dockerfile: Dockerfile
    environment:
      REDIS_URL: ${REDIS_URL:-redis://redis:6379/0}
      DB_HOST: ${MYSQL_HOST:-mysql}
      DB_PORT: ${MYSQL_PORT:-3306}
      DB_USER: ${MYSQL_USER:-sneakers}
      DB_PASSWORD: ${MYSQL_PASSWORD:-sneakers}
      DB_NAME: ${MYSQL_DATABASE:-sneakersniper}
    depends_on:
      redis:
        condition: service_healthy
      mysql:
        condition: service_healthy
    networks:
      - servicesnet

  checkout:
    build:
      context: ./services/checkout
      dockerfile: Dockerfile
    environment:
      REDIS_URL: ${REDIS_URL:-redis://redis:6379/0}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY:-jVxNo3o7m4pQeP1bRkVfVdQwAqTiQzQ0oQvYkqS0s9U=}  # demo only
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - servicesnet

  proxy:
    build:
      context: ./services/proxy
    environment:
      REDIS_URL: ${REDIS_URL:-redis://redis:6379/0}
      PROXY_MIN_HEALTH: 70
      PROXY_EXPLORE_RATE: 0.08
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - servicesnet

  proxy-metrics:
    build:
      context: ./services/proxy
    command: python services/proxy/metrics_server.py
    ports:
      - "8002:8000"
    depends_on:
      proxy:
        condition: service_started
    networks:
      - servicesnet

  prometheus_services:
    image: prom/prometheus:v2.47.2
    ports:
      - "9091:9090"
    volumes:
      - ./infra/prometheus.services.yml:/etc/prometheus/prometheus.yml:ro
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
    networks:
      - servicesnet

volumes:
  redis_services_data:
  mysql_services_data:
  pg_services_data:

networks:
  servicesnet:
    driver: bridge
