import React, { FormEvent, useMemo, useState } from 'react';
import { motion } from 'framer-motion';
import {
  Briefcase,
  CalendarClock,
  CalendarRange,
  CheckCircle2,
  ClipboardList,
  ExternalLink,
  Filter,
  ListChecks,
  MessageSquare,
  PlusCircle,
  Sparkles,
  Target,
  TimerReset,
  Workflow,
  Bot,
} from 'lucide-react';
import { formatDistanceToNow } from 'date-fns';
import { cn } from './lib/cn';

const stageOrder = ['Prospecting', 'Applied', 'Interviewing', 'Offer', 'Hired', 'Archived'] as const;

const stageStyles: Record<(typeof stageOrder)[number], string> = {
  Prospecting: 'bg-sky-50 text-sky-700 ring-1 ring-sky-200',
  Applied: 'bg-indigo-50 text-indigo-700 ring-1 ring-indigo-200',
  Interviewing: 'bg-amber-50 text-amber-700 ring-1 ring-amber-200',
  Offer: 'bg-emerald-50 text-emerald-700 ring-1 ring-emerald-200',
  Hired: 'bg-lime-50 text-lime-700 ring-1 ring-lime-200',
  Archived: 'bg-slate-100 text-slate-600 ring-1 ring-slate-200',
};

const stageDots: Record<(typeof stageOrder)[number], string> = {
  Prospecting: 'bg-sky-400',
  Applied: 'bg-indigo-400',
  Interviewing: 'bg-amber-400',
  Offer: 'bg-emerald-400',
  Hired: 'bg-lime-400',
  Archived: 'bg-slate-400',
};

const createId = () =>
  typeof crypto !== 'undefined' && typeof crypto.randomUUID === 'function'
    ? crypto.randomUUID()
    : `${Date.now()}-${Math.random().toString(16).slice(2)}`;

type JobStage = (typeof stageOrder)[number];
type JobPriority = 'High' | 'Medium' | 'Low';

type TaskStatus = 'pending' | 'scheduled' | 'completed';

type TaskCategory = 'Outreach' | 'Preparation' | 'Follow-up' | 'Research';

interface JobLead {
  id: string;
  company: string;
  role: string;
  location: string;
  link: string;
  priority: JobPriority;
  stage: JobStage;
  lastTouchpoint: string;
  followUpDate?: string;
  automationScore: number;
  tags: string[];
  notes: string[];
}

interface JobTask {
  id: string;
  jobId: string;
  title: string;
  category: TaskCategory;
  dueDate: string;
  status: TaskStatus;
  autoGenerated: boolean;
}

interface OutreachTemplate {
  id: string;
  title: string;
  purpose: string;
  prompt: string;
  followUpDays: number;
}

const initialJobs: JobLead[] = [
  {
    id: 'lead-1',
    company: 'Atlas Robotics',
    role: 'Senior AI Product Manager',
    location: 'Remote - US',
    link: 'https://example.com/jobs/atlas-ai-pm',
    priority: 'High',
    stage: 'Interviewing',
    lastTouchpoint: new Date().toISOString(),
    followUpDate: new Date(Date.now() + 1000 * 60 * 60 * 24 * 2).toISOString(),
    automationScore: 82,
    tags: ['AI', 'Product', 'Remote-first'],
    notes: ['Panel interview scheduled Friday', 'Hiring manager loves quant storytelling'],
  },
  {
    id: 'lead-2',
    company: 'Northwind Labs',
    role: 'Lead Platform Strategist',
    location: 'Austin, TX',
    link: 'https://example.com/jobs/northwind-platform',
    priority: 'Medium',
    stage: 'Applied',
    lastTouchpoint: new Date(Date.now() - 1000 * 60 * 60 * 24 * 2).toISOString(),
    followUpDate: new Date(Date.now() + 1000 * 60 * 60 * 24 * 5).toISOString(),
    automationScore: 74,
    tags: ['Platform', 'Growth'],
    notes: ['Referred by alumni', 'Needs follow-up to recruiter on availability'],
  },
  {
    id: 'lead-3',
    company: 'Lighthouse Health',
    role: 'Director of Product Operations',
    location: 'Boston, MA (Hybrid)',
    link: 'https://example.com/jobs/lighthouse-product-ops',
    priority: 'High',
    stage: 'Prospecting',
    lastTouchpoint: new Date(Date.now() - 1000 * 60 * 60 * 24 * 4).toISOString(),
    automationScore: 68,
    tags: ['Healthcare', 'Operations'],
    notes: ['Need warm intro via LinkedIn group', 'Map product suite before outreach'],
  },
];

const initialTasks: JobTask[] = [
  {
    id: 'task-1',
    jobId: 'lead-1',
    title: 'Send thank-you recap & attach roadmap artifact',
    category: 'Follow-up',
    dueDate: new Date(Date.now() + 1000 * 60 * 60 * 12).toISOString(),
    status: 'scheduled',
    autoGenerated: true,
  },
  {
    id: 'task-2',
    jobId: 'lead-2',
    title: 'Automate recruiter follow-up email with metrics',
    category: 'Outreach',
    dueDate: new Date(Date.now() + 1000 * 60 * 60 * 24 * 2).toISOString(),
    status: 'pending',
    autoGenerated: true,
  },
  {
    id: 'task-3',
    jobId: 'lead-3',
    title: 'Build persona map & generate custom outreach sequence',
    category: 'Research',
    dueDate: new Date(Date.now() + 1000 * 60 * 60 * 24).toISOString(),
    status: 'pending',
    autoGenerated: false,
  },
];

const outreachTemplates: OutreachTemplate[] = [
  {
    id: 'template-1',
    title: 'Discovery Outreach',
    purpose: 'Connect with hiring manager with value-first framing',
    prompt: `Subject: How I can accelerate [COMPANY]'s 2025 roadmap

Hi [NAME],

I've been following [COMPANY]'s progress on [STRATEGIC INITIATIVE]. I recently led a similar initiative that unlocked [RESULT]. Would love to trade notes on how this can translate to your next milestone.

Here's a 90-second loom covering the playbook. Open to a quick sync next week?

Best,
[YOU]`,
    followUpDays: 3,
  },
  {
    id: 'template-2',
    title: 'Post-Interview Recap',
    purpose: 'Send structured summary + automation-ready call to action',
    prompt: `Subject: Key takeaways + next steps

Thanks again for diving deep on [TOPICS]. Based on the conversation I've mapped three quick wins I can deliver in Sprint 1:

1. [IMPACT AREA]
2. [METRIC TO MOVE]
3. [CROSS-FN PARTNER]

Let me know if you want the operational plan I mentioned â€“ I can spin that up tonight.`,
    followUpDays: 2,
  },
  {
    id: 'template-3',
    title: 'Referral Activation',
    purpose: 'Empower champions to open doors',
    prompt: `Subject: Quick intro request

Hey [NAME],

I saw you're connected with [CONTACT] on the [TEAM] at [COMPANY]. I put together a 1-page highlight reel tailored to their priorities. Mind teeing up an intro? Happy to draft a forwardable blurb.

Appreciate you!
[YOU]`,
    followUpDays: 4,
  },
];

const JobSearchAutomation: React.FC = () => {
  const [jobs, setJobs] = useState<JobLead[]>(initialJobs);
  const [tasks, setTasks] = useState<JobTask[]>(initialTasks);
  const [selectedJobId, setSelectedJobId] = useState<string>(initialJobs[0]?.id ?? '');
  const [filters, setFilters] = useState({ search: '', stage: 'all', priority: 'all' });
  const [newJob, setNewJob] = useState({
    company: '',
    role: '',
    location: '',
    link: '',
    priority: 'Medium' as JobPriority,
    tags: '',
  });

  const filteredJobs = useMemo(() => {
    return jobs.filter((job) => {
      const matchesSearch = `${job.company} ${job.role} ${job.location}`
        .toLowerCase()
        .includes(filters.search.toLowerCase());
      const matchesStage = filters.stage === 'all' || job.stage === filters.stage;
      const matchesPriority = filters.priority === 'all' || job.priority === filters.priority;
      return matchesSearch && matchesStage && matchesPriority;
    });
  }, [filters.priority, filters.search, filters.stage, jobs]);

  const selectedJob = jobs.find((job) => job.id === selectedJobId) ?? filteredJobs[0] ?? null;

  const pipelineMetrics = useMemo(() => {
    const stageCounts = stageOrder.reduce<Record<JobStage, number>>((acc, stage) => {
      acc[stage] = jobs.filter((job) => job.stage === stage).length;
      return acc;
    }, {} as Record<JobStage, number>);

    const activeLeads = jobs.filter((job) => job.stage !== 'Archived').length;
    const automationAverage = Math.round(
      jobs.reduce((total, job) => total + job.automationScore, 0) / (jobs.length || 1),
    );
    const upcomingFollowUps = tasks.filter((task) => task.status !== 'completed').length;

    return {
      stageCounts,
      activeLeads,
      automationAverage,
      upcomingFollowUps,
    };
  }, [jobs, tasks]);

  const jobTasks = useMemo(
    () => (selectedJob ? tasks.filter((task) => task.jobId === selectedJob.id) : []),
    [selectedJob, tasks],
  );

  const nextFollowUps = useMemo(() => {
    return tasks
      .filter((task) => task.status !== 'completed')
      .sort((a, b) => new Date(a.dueDate).getTime() - new Date(b.dueDate).getTime())
      .slice(0, 5)
      .map((task) => ({
        ...task,
        job: jobs.find((job) => job.id === task.jobId),
      }));
  }, [jobs, tasks]);

  const automationIdeas = useMemo(() => {
    const prospectingCount = jobs.filter((job) => job.stage === 'Prospecting').length;
    const agingApplications = jobs.filter(
      (job) => job.stage === 'Applied' && Date.now() - new Date(job.lastTouchpoint).getTime() > 1000 * 60 * 60 * 24 * 3,
    ).length;
    const interviewPrep = jobs.filter((job) => job.stage === 'Interviewing').length;

    return [
      {
        id: 'idea-1',
        title: 'Weekly Outreach Sprint',
        description: `Queue ${prospectingCount + 2} targeted messages based on your ICP tags automatically.`,
        icon: Bot,
        emphasis: 'automation',
      },
      {
        id: 'idea-2',
        title: 'Follow-up Cadence Guardrails',
        description: `${agingApplications} applications are ready for a recruiter bump. Generate touchpoints + add calendar reminders in one click.`,
        icon: CalendarClock,
        emphasis: 'cadence',
      },
      {
        id: 'idea-3',
        title: 'Interview Readiness Pack',
        description: `${interviewPrep} pipeline conversations flagged for prep. Spin up question banks, stories, and STAR cheat sheets.`,
        icon: Sparkles,
        emphasis: 'prep',
      },
    ];
  }, [jobs]);

  const handleStageChange = (jobId: string, stage: JobStage) => {
    setJobs((prev) =>
      prev.map((job) =>
        job.id === jobId
          ? {
              ...job,
              stage,
              lastTouchpoint: new Date().toISOString(),
              followUpDate:
                stage === 'Interviewing'
                  ? new Date(Date.now() + 1000 * 60 * 60 * 24 * 2).toISOString()
                  : stage === 'Offer'
                  ? new Date(Date.now() + 1000 * 60 * 60 * 24).toISOString()
                  : undefined,
            }
          : job,
      ),
    );

    setTasks((prev) => {
      const generatedTasks: JobTask[] = [];
      if (stage === 'Interviewing') {
        generatedTasks.push({
          id: `task-${createId()}`,
          jobId,
          title: 'Automate interview prep kit (stories + metrics)',
          category: 'Preparation',
          dueDate: new Date(Date.now() + 1000 * 60 * 60 * 12).toISOString(),
          status: 'scheduled',
          autoGenerated: true,
        });
      }
      if (stage === 'Offer') {
        generatedTasks.push({
          id: `task-${createId()}`,
          jobId,
          title: 'Generate negotiation brief & market calibration',
          category: 'Research',
          dueDate: new Date(Date.now() + 1000 * 60 * 60 * 6).toISOString(),
          status: 'pending',
          autoGenerated: true,
        });
      }
      return [...prev, ...generatedTasks];
    });
  };

  const handleTaskStatus = (taskId: string, status: TaskStatus) => {
    setTasks((prev) => prev.map((task) => (task.id === taskId ? { ...task, status } : task)));
  };

  const handleScheduleFollowUp = (job: JobLead) => {
    const dueDate = new Date(Date.now() + 1000 * 60 * 60 * 24 * 2).toISOString();
    const newTask: JobTask = {
      id: `task-${createId()}`,
      jobId: job.id,
      title: `Follow up with ${job.company} about ${job.role}`,
      category: 'Follow-up',
      dueDate,
      status: 'scheduled',
      autoGenerated: true,
    };

    setTasks((prev) => [newTask, ...prev]);
    setJobs((prev) => prev.map((lead) => (lead.id === job.id ? { ...lead, followUpDate: dueDate } : lead)));
  };

  const handleGenerateWeeklyPlan = () => {
    const planTasks: JobTask[] = jobs.flatMap((job) => {
      const tasksForJob: JobTask[] = [];
      if (job.stage === 'Prospecting') {
        tasksForJob.push({
          id: `task-${createId()}`,
          jobId: job.id,
          title: 'Spin up ICP research brief and outreach list',
          category: 'Research',
          dueDate: new Date(Date.now() + 1000 * 60 * 60 * 24).toISOString(),
          status: 'pending',
          autoGenerated: true,
        });
      }
      if (job.stage === 'Applied') {
        tasksForJob.push({
          id: `task-${createId()}`,
          jobId: job.id,
          title: 'Draft recruiter follow-up & send via sequence',
          category: 'Outreach',
          dueDate: new Date(Date.now() + 1000 * 60 * 60 * 24 * 2).toISOString(),
          status: 'pending',
          autoGenerated: true,
        });
      }
      if (job.stage === 'Interviewing') {
        tasksForJob.push({
          id: `task-${createId()}`,
          jobId: job.id,
          title: 'Automate interview debrief template + story bank',
          category: 'Preparation',
          dueDate: new Date(Date.now() + 1000 * 60 * 60 * 24 * 3).toISOString(),
          status: 'scheduled',
          autoGenerated: true,
        });
      }
      return tasksForJob;
    });

    setTasks((prev) => [...planTasks, ...prev]);
  };

  const handleAddJob = (event: FormEvent<HTMLFormElement>) => {
    event.preventDefault();
    const id = `lead-${createId()}`;
    const tags = newJob.tags
      .split(',')
      .map((tag) => tag.trim())
      .filter(Boolean);

    const job: JobLead = {
      id,
      company: newJob.company,
      role: newJob.role,
      location: newJob.location,
      link: newJob.link,
      priority: newJob.priority,
      stage: 'Prospecting',
      lastTouchpoint: new Date().toISOString(),
      automationScore: 60 + Math.floor(Math.random() * 20),
      tags: tags.length ? tags : ['Custom'],
      notes: ['Auto-create sequences & score leads'],
    };

    setJobs((prev) => [job, ...prev]);
    setSelectedJobId(id);
    setNewJob({ company: '', role: '', location: '', link: '', priority: 'Medium', tags: '' });
  };

  const handleFilterChange = (key: 'search' | 'stage' | 'priority', value: string) => {
    setFilters((prev) => ({ ...prev, [key]: value }));
  };

  const renderStagePills = (currentStage: JobStage, jobId: string) => {
    return (
      <div className="flex flex-wrap gap-2">
        {stageOrder.map((stage) => {
          const isActive = stage === currentStage;
          const stageIndex = stageOrder.indexOf(stage);
          const currentIndex = stageOrder.indexOf(currentStage);
          const isCompleted = stageIndex < currentIndex;

          return (
            <button
              key={`${jobId}-${stage}`}
              onClick={() => handleStageChange(jobId, stage)}
              className={cn(
                'flex items-center gap-2 rounded-full border px-3 py-1 text-sm transition hover:shadow-sm',
                isActive && 'border-primary bg-primary/10 text-primary font-medium',
                !isActive && !isCompleted && 'border-muted text-muted-foreground',
                isCompleted && 'border-emerald-200 bg-emerald-50 text-emerald-700',
              )}
            >
              {isCompleted ? <CheckCircle2 className="h-3.5 w-3.5" /> : <Workflow className="h-3.5 w-3.5" />}
              {stage}
            </button>
          );
        })}
      </div>
    );
  };

  return (
    <motion.div
      className="space-y-8"
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      transition={{ duration: 0.4 }}
    >
      <motion.div
        className="flex flex-col gap-4 rounded-2xl border border-border bg-card p-6 shadow-sm md:flex-row md:items-center md:justify-between"
        initial={{ y: -12, opacity: 0 }}
        animate={{ y: 0, opacity: 1 }}
        transition={{ duration: 0.4 }}
      >
        <div className="flex items-start gap-4">
          <div className="rounded-2xl bg-gradient-to-br from-violet-500/10 to-violet-400/20 p-3">
            <Briefcase className="h-6 w-6 text-violet-500" />
          </div>
          <div className="space-y-1">
            <h1 className="text-3xl font-bold text-foreground">Job Search Automation Hub</h1>
            <p className="text-muted-foreground">
              Orchestrate outreach, follow-ups, and interview prep with automation-ready playbooks built for operators.
            </p>
          </div>
        </div>
        <div className="flex flex-wrap items-center gap-3">
          <button
            onClick={handleGenerateWeeklyPlan}
            className="inline-flex items-center gap-2 rounded-full bg-primary px-4 py-2 text-sm font-semibold text-primary-foreground shadow-sm transition hover:shadow"
          >
            <Sparkles className="h-4 w-4" /> Generate Weekly Automation Plan
          </button>
          <button
            onClick={() => selectedJob && handleScheduleFollowUp(selectedJob)}
            disabled={!selectedJob}
            className="inline-flex items-center gap-2 rounded-full border border-border px-4 py-2 text-sm font-semibold text-foreground transition hover:bg-muted disabled:cursor-not-allowed disabled:opacity-60"
          >
            <CalendarRange className="h-4 w-4" /> Schedule Smart Follow-up
          </button>
        </div>
      </motion.div>

      <div className="grid gap-4 md:grid-cols-2 xl:grid-cols-4">
        <div className="rounded-2xl border border-border bg-card p-4 shadow-sm">
          <div className="flex items-center justify-between text-sm text-muted-foreground">
            <span>Active Leads</span>
            <Briefcase className="h-4 w-4" />
          </div>
          <p className="mt-2 text-3xl font-bold text-foreground">{pipelineMetrics.activeLeads}</p>
          <p className="text-xs text-muted-foreground">{jobs.length} total in pipeline</p>
        </div>
        <div className="rounded-2xl border border-border bg-card p-4 shadow-sm">
          <div className="flex items-center justify-between text-sm text-muted-foreground">
            <span>Automation Health</span>
            <Bot className="h-4 w-4" />
          </div>
          <p className="mt-2 text-3xl font-bold text-foreground">{pipelineMetrics.automationAverage}%</p>
          <p className="text-xs text-muted-foreground">Average automation score across leads</p>
        </div>
        <div className="rounded-2xl border border-border bg-card p-4 shadow-sm">
          <div className="flex items-center justify-between text-sm text-muted-foreground">
            <span>Next Actions</span>
            <ListChecks className="h-4 w-4" />
          </div>
          <p className="mt-2 text-3xl font-bold text-foreground">{pipelineMetrics.upcomingFollowUps}</p>
          <p className="text-xs text-muted-foreground">Tasks scheduled this week</p>
        </div>
        <div className="rounded-2xl border border-border bg-card p-4 shadow-sm">
          <div className="flex items-center justify-between text-sm text-muted-foreground">
            <span>Momentum</span>
            <Target className="h-4 w-4" />
          </div>
          <p className="mt-2 text-3xl font-bold text-emerald-500">
            {Math.min(100, pipelineMetrics.activeLeads * 12 + pipelineMetrics.upcomingFollowUps * 4)}%
          </p>
          <p className="text-xs text-muted-foreground">Composite signal of pipeline + actions</p>
        </div>
      </div>

      <div className="grid gap-6 xl:grid-cols-[1.1fr_1.4fr_1fr]">
        <div className="space-y-6">
          <section className="rounded-2xl border border-border bg-card p-6 shadow-sm">
            <div className="mb-4 flex items-center justify-between">
              <div className="flex items-center gap-3">
                <Filter className="h-5 w-5 text-muted-foreground" />
                <h2 className="text-xl font-semibold text-foreground">Pipeline Control Center</h2>
              </div>
              <span className="text-sm text-muted-foreground">{filteredJobs.length} showing</span>
            </div>
            <div className="space-y-4">
              <div className="grid gap-3">
                <input
                  type="search"
                  value={filters.search}
                  onChange={(event) => handleFilterChange('search', event.target.value)}
                  placeholder="Search by company, role, or location"
                  className="w-full rounded-xl border border-border bg-background px-4 py-2 text-sm outline-none focus:ring-2 focus:ring-primary/40"
                />
                <div className="flex flex-wrap gap-2 text-xs font-medium">
                  <button
                    className={cn(
                      'rounded-full border border-border px-3 py-1',
                      filters.stage === 'all' && 'border-primary bg-primary/10 text-primary',
                    )}
                    onClick={() => handleFilterChange('stage', 'all')}
                  >
                    All Stages
                  </button>
                  {stageOrder.map((stage) => (
                    <button
                      key={stage}
                      className={cn(
                        'rounded-full border border-border px-3 py-1',
                        filters.stage === stage && 'border-primary bg-primary/10 text-primary',
                      )}
                      onClick={() => handleFilterChange('stage', stage)}
                    >
                      {stage}
                    </button>
                  ))}
                </div>
                <div className="flex flex-wrap gap-2 text-xs font-medium">
                  {(['all', 'High', 'Medium', 'Low'] as const).map((priority) => (
                    <button
                      key={priority}
                      className={cn(
                        'rounded-full border border-border px-3 py-1',
                        filters.priority === priority && 'border-primary bg-primary/10 text-primary',
                      )}
                      onClick={() => handleFilterChange('priority', priority)}
                    >
                      Priority: {priority === 'all' ? 'All' : priority}
                    </button>
                  ))}
                </div>
              </div>
              <div className="space-y-2">
                {filteredJobs.map((job) => (
                  <button
                    key={job.id}
                    onClick={() => setSelectedJobId(job.id)}
                    className={cn(
                      'w-full rounded-2xl border border-border bg-background p-4 text-left transition hover:border-primary/50 hover:shadow-sm',
                      selectedJob?.id === job.id && 'border-primary/60 bg-primary/5 shadow-md',
                    )}
                  >
                    <div className="flex items-start justify-between">
                      <div>
                        <p className="text-sm font-semibold text-foreground">{job.role}</p>
                        <p className="text-xs text-muted-foreground">{job.company}</p>
                      </div>
                      <span className={cn('rounded-full px-2 py-0.5 text-xs font-medium', stageStyles[job.stage])}>{job.stage}</span>
                    </div>
                    <div className="mt-3 flex flex-wrap gap-2 text-[11px] text-muted-foreground">
                      <span className="rounded-full bg-muted px-2 py-0.5">{job.location}</span>
                      <span className="rounded-full bg-muted px-2 py-0.5">Priority: {job.priority}</span>
                      {job.tags.map((tag) => (
                        <span key={`${job.id}-${tag}`} className="rounded-full bg-muted px-2 py-0.5">
                          {tag}
                        </span>
                      ))}
                    </div>
                    <div className="mt-3 flex items-center justify-between text-xs text-muted-foreground">
                      <span>Last touch {formatDistanceToNow(new Date(job.lastTouchpoint), { addSuffix: true })}</span>
                      {job.followUpDate && <span>Next follow-up in {formatDistanceToNow(new Date(job.followUpDate))}</span>}
                    </div>
                  </button>
                ))}
                {!filteredJobs.length && (
                  <div className="rounded-2xl border border-dashed border-border bg-muted/40 p-6 text-center text-sm text-muted-foreground">
                    No leads match those filters yet. Add a new opportunity to get started.
                  </div>
                )}
              </div>
            </div>
          </section>

          <section className="rounded-2xl border border-border bg-card p-6 shadow-sm">
            <div className="mb-4 flex items-center gap-3">
              <PlusCircle className="h-5 w-5 text-primary" />
              <h2 className="text-xl font-semibold text-foreground">Add Opportunity</h2>
            </div>
            <form className="grid gap-3" onSubmit={handleAddJob}>
              <div className="grid gap-1">
                <label className="text-xs font-semibold text-muted-foreground">Company</label>
                <input
                  required
                  value={newJob.company}
                  onChange={(event) => setNewJob((prev) => ({ ...prev, company: event.target.value }))}
                  className="rounded-xl border border-border bg-background px-4 py-2 text-sm outline-none focus:ring-2 focus:ring-primary/40"
                  placeholder="Acme Robotics"
                />
              </div>
              <div className="grid gap-1">
                <label className="text-xs font-semibold text-muted-foreground">Role</label>
                <input
                  required
                  value={newJob.role}
                  onChange={(event) => setNewJob((prev) => ({ ...prev, role: event.target.value }))}
                  className="rounded-xl border border-border bg-background px-4 py-2 text-sm outline-none focus:ring-2 focus:ring-primary/40"
                  placeholder="Director of Product"
                />
              </div>
              <div className="grid gap-1">
                <label className="text-xs font-semibold text-muted-foreground">Location</label>
                <input
                  required
                  value={newJob.location}
                  onChange={(event) => setNewJob((prev) => ({ ...prev, location: event.target.value }))}
                  className="rounded-xl border border-border bg-background px-4 py-2 text-sm outline-none focus:ring-2 focus:ring-primary/40"
                  placeholder="Remote, NYC, Austin..."
                />
              </div>
              <div className="grid gap-1">
                <label className="text-xs font-semibold text-muted-foreground">Link</label>
                <input
                  value={newJob.link}
                  onChange={(event) => setNewJob((prev) => ({ ...prev, link: event.target.value }))}
                  className="rounded-xl border border-border bg-background px-4 py-2 text-sm outline-none focus:ring-2 focus:ring-primary/40"
                  placeholder="https://"
                />
              </div>
              <div className="grid gap-1">
                <label className="text-xs font-semibold text-muted-foreground">Priority</label>
                <select
                  value={newJob.priority}
                  onChange={(event) => setNewJob((prev) => ({ ...prev, priority: event.target.value as JobPriority }))}
                  className="rounded-xl border border-border bg-background px-4 py-2 text-sm outline-none focus:ring-2 focus:ring-primary/40"
                >
                  <option value="High">High</option>
                  <option value="Medium">Medium</option>
                  <option value="Low">Low</option>
                </select>
              </div>
              <div className="grid gap-1">
                <label className="text-xs font-semibold text-muted-foreground">Tags</label>
                <input
                  value={newJob.tags}
                  onChange={(event) => setNewJob((prev) => ({ ...prev, tags: event.target.value }))}
                  className="rounded-xl border border-border bg-background px-4 py-2 text-sm outline-none focus:ring-2 focus:ring-primary/40"
                  placeholder="AI, Seed Stage, Climate"
                />
              </div>
              <button
                type="submit"
                className="mt-2 inline-flex items-center justify-center gap-2 rounded-xl bg-primary px-4 py-2 text-sm font-semibold text-primary-foreground shadow-sm transition hover:shadow"
              >
                <Sparkles className="h-4 w-4" />
                Create automated workflow
              </button>
            </form>
          </section>
        </div>

        <div className="space-y-6">
          <section className="rounded-2xl border border-border bg-card p-6 shadow-sm">
            {selectedJob ? (
              <div className="space-y-6">
                <header className="flex items-start justify-between gap-4">
                  <div className="space-y-1">
                    <h2 className="text-2xl font-semibold text-foreground">{selectedJob.role}</h2>
                    <div className="flex flex-wrap items-center gap-2 text-sm text-muted-foreground">
                      <span>{selectedJob.company}</span>
                      <span className="hidden h-1 w-1 rounded-full bg-muted-foreground sm:inline-flex" />
                      <span>{selectedJob.location}</span>
                      {selectedJob.link && (
                        <a
                          href={selectedJob.link}
                          className="inline-flex items-center gap-1 text-primary hover:underline"
                          target="_blank"
                          rel="noreferrer"
                        >
                          View posting <ExternalLink className="h-3 w-3" />
                        </a>
                      )}
                    </div>
                  </div>
                  <div className="text-right">
                    <p className="text-xs uppercase text-muted-foreground">Automation Score</p>
                    <p className="text-3xl font-bold text-primary">{selectedJob.automationScore}</p>
                  </div>
                </header>

                <div className="space-y-4">
                  <div>
                    <h3 className="text-sm font-semibold text-muted-foreground">Stage Progress</h3>
                    <div className="mt-3 flex flex-col gap-3">
                      {renderStagePills(selectedJob.stage, selectedJob.id)}
                    </div>
                  </div>

                  <div>
                    <h3 className="text-sm font-semibold text-muted-foreground">Automation Signals</h3>
                    <div className="mt-3 grid gap-3 md:grid-cols-3">
                      <div className="rounded-xl border border-border p-3">
                        <p className="text-xs text-muted-foreground">Priority</p>
                        <p className="text-sm font-semibold text-foreground">{selectedJob.priority}</p>
                      </div>
                      <div className="rounded-xl border border-border p-3">
                        <p className="text-xs text-muted-foreground">Next touch</p>
                        <p className="text-sm font-semibold text-foreground">
                          {selectedJob.followUpDate
                            ? formatDistanceToNow(new Date(selectedJob.followUpDate), { addSuffix: true })
                            : 'Not scheduled'}
                        </p>
                      </div>
                      <div className="rounded-xl border border-border p-3">
                        <p className="text-xs text-muted-foreground">Last engagement</p>
                        <p className="text-sm font-semibold text-foreground">
                          {formatDistanceToNow(new Date(selectedJob.lastTouchpoint), { addSuffix: true })}
                        </p>
                      </div>
                    </div>
                  </div>

                  <div className="space-y-3">
                    <h3 className="text-sm font-semibold text-muted-foreground">Notes & insights</h3>
                    <ul className="space-y-2 text-sm text-muted-foreground">
                      {selectedJob.notes.map((note, index) => (
                        <li key={`${selectedJob.id}-note-${index}`} className="flex items-start gap-2">
                          <Sparkles className="mt-0.5 h-3.5 w-3.5 text-primary" />
                          <span>{note}</span>
                        </li>
                      ))}
                    </ul>
                  </div>
                </div>

                <div className="space-y-3">
                  <div className="flex items-center justify-between">
                    <h3 className="text-sm font-semibold text-muted-foreground">Workflow queue</h3>
                    <button
                      onClick={() => handleScheduleFollowUp(selectedJob)}
                      className="inline-flex items-center gap-1 rounded-lg border border-border px-3 py-1 text-xs font-medium text-foreground hover:bg-muted"
                    >
                      <TimerReset className="h-3.5 w-3.5" /> Add follow-up
                    </button>
                  </div>
                  <div className="space-y-2">
                    {jobTasks.length ? (
                      jobTasks.map((task) => (
                        <div
                          key={task.id}
                          className="flex items-start justify-between gap-3 rounded-xl border border-border bg-background p-4 text-sm"
                        >
                          <div className="space-y-2">
                            <div className="flex items-center gap-2">
                              <span
                                className={cn(
                                  'rounded-full px-2 py-0.5 text-[11px] font-medium',
                                  task.autoGenerated
                                    ? 'bg-primary/10 text-primary'
                                    : 'bg-muted text-muted-foreground',
                                )}
                              >
                                {task.category}
                              </span>
                              {task.autoGenerated && (
                                <span className="text-[11px] text-primary">auto</span>
                              )}
                            </div>
                            <p className="text-foreground">{task.title}</p>
                            <p className="text-[11px] text-muted-foreground">
                              Due {formatDistanceToNow(new Date(task.dueDate), { addSuffix: true })}
                            </p>
                          </div>
                          <div className="flex gap-2">
                            <button
                              onClick={() => handleTaskStatus(task.id, 'completed')}
                              className={cn(
                                'rounded-full border px-3 py-1 text-xs font-medium transition',
                                task.status === 'completed'
                                  ? 'border-emerald-300 bg-emerald-50 text-emerald-700'
                                  : 'border-border text-muted-foreground hover:bg-muted',
                              )}
                            >
                              Mark done
                            </button>
                            {task.status !== 'completed' && (
                              <button
                                onClick={() => handleTaskStatus(task.id, 'scheduled')}
                                className="rounded-full border border-border px-3 py-1 text-xs font-medium text-foreground hover:bg-muted"
                              >
                                Snooze
                              </button>
                            )}
                          </div>
                        </div>
                      ))
                    ) : (
                      <div className="rounded-xl border border-dashed border-border bg-muted/40 p-6 text-center text-sm text-muted-foreground">
                        No tasks queued yet. Generate a playbook to spin up automations.
                      </div>
                    )}
                  </div>
                </div>
              </div>
            ) : (
              <div className="rounded-xl border border-dashed border-border bg-muted/40 p-8 text-center text-sm text-muted-foreground">
                Select a lead from the left to see automation insights.
              </div>
            )}
          </section>

          <section className="rounded-2xl border border-border bg-card p-6 shadow-sm">
            <div className="mb-4 flex items-center gap-2">
              <MessageSquare className="h-5 w-5 text-primary" />
              <h2 className="text-xl font-semibold text-foreground">Outreach Templates</h2>
            </div>
            <div className="space-y-4">
              {outreachTemplates.map((template) => (
                <div key={template.id} className="rounded-2xl border border-border bg-background p-4">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-sm font-semibold text-foreground">{template.title}</p>
                      <p className="text-xs text-muted-foreground">{template.purpose}</p>
                    </div>
                    <span className="text-xs text-muted-foreground">Follow-up in {template.followUpDays} days</span>
                  </div>
                  <pre className="mt-3 whitespace-pre-wrap rounded-xl bg-muted/40 p-3 text-xs text-muted-foreground">
                    {template.prompt}
                  </pre>
                </div>
              ))}
            </div>
          </section>
        </div>

        <div className="space-y-6">
          <section className="rounded-2xl border border-border bg-card p-6 shadow-sm">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-2">
                <CalendarClock className="h-5 w-5 text-primary" />
                <h2 className="text-xl font-semibold text-foreground">Next Automations</h2>
              </div>
              <span className="text-xs text-muted-foreground">Top 5 queued</span>
            </div>
            <div className="mt-4 space-y-3">
              {nextFollowUps.length ? (
                nextFollowUps.map((task) => (
                  <div key={task.id} className="rounded-xl border border-border bg-background p-4 text-sm">
                    <div className="flex items-center justify-between">
                      <span className="font-semibold text-foreground">{task.title}</span>
                      <span className="text-xs text-muted-foreground">
                        {formatDistanceToNow(new Date(task.dueDate), { addSuffix: true })}
                      </span>
                    </div>
                    <div className="mt-2 flex flex-wrap items-center gap-2 text-xs text-muted-foreground">
                      {task.job && <span className="rounded-full bg-muted px-2 py-0.5">{task.job.company}</span>}
                      <span className="rounded-full bg-muted px-2 py-0.5">{task.category}</span>
                      {task.autoGenerated && <span className="rounded-full bg-primary/10 px-2 py-0.5 text-primary">Automated</span>}
                    </div>
                  </div>
                ))
              ) : (
                <div className="rounded-xl border border-dashed border-border bg-muted/40 p-6 text-center text-sm text-muted-foreground">
                  Queue is clear. Add automation from any opportunity.
                </div>
              )}
            </div>
          </section>

          <section className="rounded-2xl border border-border bg-card p-6 shadow-sm">
            <div className="flex items-center gap-2">
              <ClipboardList className="h-5 w-5 text-primary" />
              <h2 className="text-xl font-semibold text-foreground">Automation Playbooks</h2>
            </div>
            <div className="mt-4 space-y-3">
              {automationIdeas.map((idea) => (
                <div key={idea.id} className="rounded-2xl border border-border bg-background p-4">
                  <div className="flex items-center gap-3">
                    <idea.icon className="h-5 w-5 text-primary" />
                    <div>
                      <p className="text-sm font-semibold text-foreground">{idea.title}</p>
                      <p className="text-xs text-muted-foreground">{idea.description}</p>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </section>

          <section className="rounded-2xl border border-border bg-card p-6 shadow-sm">
            <div className="flex items-center gap-2">
              <Workflow className="h-5 w-5 text-primary" />
              <h2 className="text-xl font-semibold text-foreground">Stage Analytics</h2>
            </div>
            <div className="mt-4 space-y-3">
              {stageOrder.map((stage) => (
                <div key={`analytics-${stage}`} className="flex items-center justify-between text-sm">
                  <div className="flex items-center gap-2">
                    <span className={cn('h-2 w-2 rounded-full', stageDots[stage])} />
                    <span className="text-muted-foreground">{stage}</span>
                  </div>
                  <div className="flex items-center gap-2 text-muted-foreground">
                    <span>{pipelineMetrics.stageCounts[stage]} leads</span>
                    <span className="h-1 w-12 rounded-full bg-muted">
                      <span
                        className="block h-full rounded-full bg-primary"
                        style={{
                          width: `${Math.min(100, pipelineMetrics.stageCounts[stage] * 25)}%`,
                        }}
                      />
                    </span>
                  </div>
                </div>
              ))}
            </div>
          </section>
        </div>
      </div>
    </motion.div>
  );
};

export default JobSearchAutomation;
