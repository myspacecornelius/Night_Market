version: "3.9"

services:
  postgres:
    image: postgis/postgis:15-3.4
    ports:
      - "5432:5432"
    env_file:
      - .env.example
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - appnet

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - appnet

  migrate:
    build:
      context: .
      dockerfile: backend/Dockerfile
    env_file:
      - .env.example
    environment:
      - DATABASE_URL=${DATABASE_URL}
    depends_on:
      postgres:
        condition: service_healthy
    command: alembic upgrade head
    restart: "no"
    networks:
      - appnet

  api:
    build:
      context: .
    dockerfile: backend/Dockerfile
    ports:
      - "${API_PORT}:8000"
    volumes:
      - ./backend:/app/backend:cached
    env_file:
      - .env.example
    environment:
      - PYTHONPATH=/app
      - RUN_MIGRATIONS=false
    command: uvicorn backend.main:app --host 0.0.0.0 --port 8000
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      migrate:
        condition: service_completed_successfully
      redis:
        condition: service_healthy
    networks:
      - appnet

  worker:
    build:
      context: ./worker
      dockerfile: Dockerfile
    volumes:
      - ./worker:/app:cached
      - ./backend:/app/backend:cached
    env_file:
      - .env.example
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - ENVIRONMENT=${ENVIRONMENT}
    command: celery -A tasks.celery worker --loglevel=info
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - appnet

  beat:
    build:
      context: ./worker
      dockerfile: Dockerfile
    volumes:
      - ./worker:/app:cached
      - ./backend:/app/backend:cached
    env_file:
      - .env.example
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - ENVIRONMENT=${ENVIRONMENT}
    command: celery -A tasks.celery beat --loglevel=info
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - appnet

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "${FRONTEND_PORT}:5173"
    volumes:
      - ./frontend:/app:cached
      - /app/node_modules
    networks:
      - appnet

  prometheus:
    image: prom/prometheus:v2.47.2
    ports:
      - "9090:9090"
    volumes:
      - ./infra/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
    networks:
      - appnet

  grafana:
    image: grafana/grafana-oss:10.1.5
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infra/grafana/datasources:/etc/grafana/provisioning/datasources
      - ./infra/grafana/dashboards:/etc/grafana/provisioning/dashboards
    networks:
      - appnet

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  appnet:
    driver: bridge
