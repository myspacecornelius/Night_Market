lsof -i :3000# Copy .env.example -> .env before running. .env is required for runtime.
name: dharma
services:
  postgres:
    platform: linux/amd64
    image: postgis/postgis:15-3.4
    # No host port published; access via service name on network
    env_file:
      - .env
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - appnet

  redis:
    image: redis:7-alpine
    # No host port published; access via service name on network
    volumes:
      - redis_data:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - appnet

  api:
    build:
      context: .
      dockerfile: services/Dockerfile
    ports:
      - "${API_PORT:-8000}:8000"
    volumes:
      - ./services:/app/services:cached
    env_file:
      - .env
    environment:
      - PYTHONPATH=/app
      - RUN_MIGRATIONS=true
    working_dir: /app/services
    command: sh -c "alembic -c alembic.ini upgrade head && python -m seed && uvicorn main:app --host 0.0.0.0 --port 8000 --reload"
    healthcheck:
      test: [ "CMD", "python", "-c", "import urllib.request,sys; urllib.request.urlopen('http://localhost:8000/health'); sys.exit(0)" ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      - postgres
      - redis
    networks:
      - appnet

  worker:
    build:
      context: .
      dockerfile: worker/Dockerfile
    volumes:
      - ./worker:/app/worker:cached
      - ./services:/app/services:cached
    env_file:
      - .env
    environment:
      - PYTHONPATH=/app
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=redis://redis:6379/0
      - ENVIRONMENT=${ENVIRONMENT}
    command: celery -A worker.tasks:app worker --loglevel=info
    healthcheck:
      # Verify Redis connectivity which the worker depends on
      test: [ "CMD-SHELL", "python - <<'PY'\nimport os, sys\nimport redis\nurl=os.environ.get('REDIS_URL','redis://redis:6379/0')\ntry:\n    redis.from_url(url).ping(); sys.exit(0)\nexcept Exception as e:\n    print(e); sys.exit(1)\nPY" ]
      interval: 15s
      timeout: 5s
      retries: 10
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - appnet

  beat:
    build:
      context: .
      dockerfile: worker/Dockerfile
    volumes:
      - ./worker:/app/worker:cached
      - ./services:/app/services:cached
    env_file:
      - .env
    environment:
      - PYTHONPATH=/app
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=redis://redis:6379/0
      - ENVIRONMENT=${ENVIRONMENT}
    command: celery -A worker.tasks:app beat --loglevel=info
    healthcheck:
      # Verify Redis connectivity which beat depends on
      test: [ "CMD-SHELL", "python - <<'PY'\nimport os, sys\nimport redis\nurl=os.environ.get('REDIS_URL','redis://redis:6379/0')\ntry:\n    redis.from_url(url).ping(); sys.exit(0)\nexcept Exception as e:\n    print(e); sys.exit(1)\nPY" ]
      interval: 15s
      timeout: 5s
      retries: 10
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - appnet

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "${FRONTEND_PORT:-5173}:5173"
    volumes:
      - ./frontend:/app:cached
      - /app/node_modules
    networks:
      - appnet

  prometheus:
    image: prom/prometheus:v2.47.2
    ports:
      - "9090:9090"
    volumes:
      - ./infra/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
    networks:
      - appnet

  grafana:
    image: grafana/grafana-oss:10.1.5
    ports:
      - "3001:3001"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infra/grafana/datasources:/etc/grafana/provisioning/datasources
      - ./infra/grafana/dashboards:/etc/grafana/provisioning/dashboards
    networks:
      - appnet

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:


networks:
  appnet:
    driver: bridge

